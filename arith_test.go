// Code generated by testgen; DO NOT EDIT.

package tensor_test

import (
	"reflect"
	"testing"

	"github.com/ppknap/tensor"
)

// Use reflect package in case it isn't used in tests.
var _ = reflect.TypeOf(tensor.DType(0))

func TestTensorAdd(t *testing.T) {
	tests := map[string]struct {
		Got, Want *tensor.Tensor
	}{
		"zero value same": {
			Got:  (&tensor.Tensor{}).Add((&tensor.Tensor{})),
			Want: tensor.New(),
		},
		"new empty tensor aka scalar same": {
			Got:  tensor.New().Add(tensor.New()),
			Want: tensor.New(),
		},
		"vector with one element same": {
			Got:  enumerate(tensor.New(1)).Add(enumerate(tensor.New(1))),
			Want: tensor.New(1),
		},
		"vector with 9 elements same": {
			Got:  enumerate(tensor.New(9)).Add(enumerate(tensor.New(9))),
			Want: tensor.New(9),
		},
		"matrix one element same": {
			Got:  enumerate(tensor.New(1, 1)).Add(enumerate(tensor.New(1, 1))),
			Want: tensor.New(1, 1),
		},
		"square matrix same": {
			Got:  enumerate(tensor.New(3, 3)).Add(enumerate(tensor.New(3, 3))),
			Want: tensor.New(3, 3),
		},
		"square matrix view same": {
			Got:  enumerate(tensor.New(3, 3).View()).Add(enumerate(tensor.New(3, 3).View())),
			Want: tensor.New(3, 3),
		},
		"matrix three rows two cols same": {
			Got:  enumerate(tensor.New(3, 2)).Add(enumerate(tensor.New(3, 2))),
			Want: tensor.New(3, 2),
		},
		"three dim tensor same": {
			Got:  enumerate(tensor.New(4, 3, 2)).Add(enumerate(tensor.New(4, 3, 2))),
			Want: tensor.New(4, 3, 2),
		},
		"six dim tensor one element same": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).Add(enumerate(tensor.New(1, 1, 1, 1, 1, 1))),
			Want: tensor.New(1, 1, 1, 1, 1, 1),
		},
		"zero value scalar": {
			Got:  (&tensor.Tensor{}).Add(tensor.NewScalar(1)),
			Want: tensor.New(),
		},
		"new empty tensor aka scalar scalar": {
			Got:  tensor.New().Add(tensor.NewScalar(1)),
			Want: tensor.New(),
		},
		"vector with one element scalar": {
			Got:  enumerate(tensor.New(1)).Add(tensor.NewScalar(1)),
			Want: tensor.New(1),
		},
		"vector with 9 elements scalar": {
			Got:  enumerate(tensor.New(9)).Add(tensor.NewScalar(1)),
			Want: tensor.New(9),
		},
		"matrix one element scalar": {
			Got:  enumerate(tensor.New(1, 1)).Add(tensor.NewScalar(1)),
			Want: tensor.New(1, 1),
		},
		"square matrix scalar": {
			Got:  enumerate(tensor.New(3, 3)).Add(tensor.NewScalar(1)),
			Want: tensor.New(3, 3),
		},
		"square matrix view scalar": {
			Got:  enumerate(tensor.New(3, 3).View()).Add(tensor.NewScalar(1)),
			Want: tensor.New(3, 3),
		},
		"matrix three rows two cols scalar": {
			Got:  enumerate(tensor.New(3, 2)).Add(tensor.NewScalar(1)),
			Want: tensor.New(3, 2),
		},
		"three dim tensor scalar": {
			Got:  enumerate(tensor.New(4, 3, 2)).Add(tensor.NewScalar(1)),
			Want: tensor.New(4, 3, 2),
		},
		"six dim tensor one element scalar": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).Add(tensor.NewScalar(1)),
			Want: tensor.New(1, 1, 1, 1, 1, 1),
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			if test.Want == nil && test.Got == nil {
				return
			}

			if test.Want == nil && test.Got != nil {
				t.Fatalf("want result to be nil, got %v", test.Got)
			}
			if test.Want != nil && test.Got == nil {
				t.Fatalf("want result to be not nil")
			}
			if err := checkTensor(test.Want, test.Got); err != nil {
				t.Errorf("want err=nil; got %v", err)
			}
		})
	}
}

func TestTensorSubtract(t *testing.T) {
	tests := map[string]struct {
		Got, Want *tensor.Tensor
	}{
		"zero value same": {
			Got:  (&tensor.Tensor{}).Subtract((&tensor.Tensor{})),
			Want: tensor.New(),
		},
		"new empty tensor aka scalar same": {
			Got:  tensor.New().Subtract(tensor.New()),
			Want: tensor.New(),
		},
		"vector with one element same": {
			Got:  enumerate(tensor.New(1)).Subtract(enumerate(tensor.New(1))),
			Want: tensor.New(1),
		},
		"vector with 9 elements same": {
			Got:  enumerate(tensor.New(9)).Subtract(enumerate(tensor.New(9))),
			Want: tensor.New(9),
		},
		"matrix one element same": {
			Got:  enumerate(tensor.New(1, 1)).Subtract(enumerate(tensor.New(1, 1))),
			Want: tensor.New(1, 1),
		},
		"square matrix same": {
			Got:  enumerate(tensor.New(3, 3)).Subtract(enumerate(tensor.New(3, 3))),
			Want: tensor.New(3, 3),
		},
		"square matrix view same": {
			Got:  enumerate(tensor.New(3, 3).View()).Subtract(enumerate(tensor.New(3, 3).View())),
			Want: tensor.New(3, 3),
		},
		"matrix three rows two cols same": {
			Got:  enumerate(tensor.New(3, 2)).Subtract(enumerate(tensor.New(3, 2))),
			Want: tensor.New(3, 2),
		},
		"three dim tensor same": {
			Got:  enumerate(tensor.New(4, 3, 2)).Subtract(enumerate(tensor.New(4, 3, 2))),
			Want: tensor.New(4, 3, 2),
		},
		"six dim tensor one element same": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).Subtract(enumerate(tensor.New(1, 1, 1, 1, 1, 1))),
			Want: tensor.New(1, 1, 1, 1, 1, 1),
		},
		"zero value scalar": {
			Got:  (&tensor.Tensor{}).Subtract(tensor.NewScalar(1)),
			Want: tensor.New(),
		},
		"new empty tensor aka scalar scalar": {
			Got:  tensor.New().Subtract(tensor.NewScalar(1)),
			Want: tensor.New(),
		},
		"vector with one element scalar": {
			Got:  enumerate(tensor.New(1)).Subtract(tensor.NewScalar(1)),
			Want: tensor.New(1),
		},
		"vector with 9 elements scalar": {
			Got:  enumerate(tensor.New(9)).Subtract(tensor.NewScalar(1)),
			Want: tensor.New(9),
		},
		"matrix one element scalar": {
			Got:  enumerate(tensor.New(1, 1)).Subtract(tensor.NewScalar(1)),
			Want: tensor.New(1, 1),
		},
		"square matrix scalar": {
			Got:  enumerate(tensor.New(3, 3)).Subtract(tensor.NewScalar(1)),
			Want: tensor.New(3, 3),
		},
		"square matrix view scalar": {
			Got:  enumerate(tensor.New(3, 3).View()).Subtract(tensor.NewScalar(1)),
			Want: tensor.New(3, 3),
		},
		"matrix three rows two cols scalar": {
			Got:  enumerate(tensor.New(3, 2)).Subtract(tensor.NewScalar(1)),
			Want: tensor.New(3, 2),
		},
		"three dim tensor scalar": {
			Got:  enumerate(tensor.New(4, 3, 2)).Subtract(tensor.NewScalar(1)),
			Want: tensor.New(4, 3, 2),
		},
		"six dim tensor one element scalar": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).Subtract(tensor.NewScalar(1)),
			Want: tensor.New(1, 1, 1, 1, 1, 1),
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			if test.Want == nil && test.Got == nil {
				return
			}

			if test.Want == nil && test.Got != nil {
				t.Fatalf("want result to be nil, got %v", test.Got)
			}
			if test.Want != nil && test.Got == nil {
				t.Fatalf("want result to be not nil")
			}
			if err := checkTensor(test.Want, test.Got); err != nil {
				t.Errorf("want err=nil; got %v", err)
			}
		})
	}
}

func TestTensorMultiply(t *testing.T) {
	tests := map[string]struct {
		Got, Want *tensor.Tensor
	}{
		"zero value same": {
			Got:  (&tensor.Tensor{}).Multiply((&tensor.Tensor{})),
			Want: tensor.New(),
		},
		"new empty tensor aka scalar same": {
			Got:  tensor.New().Multiply(tensor.New()),
			Want: tensor.New(),
		},
		"vector with one element same": {
			Got:  enumerate(tensor.New(1)).Multiply(enumerate(tensor.New(1))),
			Want: tensor.New(1),
		},
		"vector with 9 elements same": {
			Got:  enumerate(tensor.New(9)).Multiply(enumerate(tensor.New(9))),
			Want: tensor.New(9),
		},
		"matrix one element same": {
			Got:  enumerate(tensor.New(1, 1)).Multiply(enumerate(tensor.New(1, 1))),
			Want: tensor.New(1, 1),
		},
		"square matrix same": {
			Got:  enumerate(tensor.New(3, 3)).Multiply(enumerate(tensor.New(3, 3))),
			Want: tensor.New(3, 3),
		},
		"square matrix view same": {
			Got:  enumerate(tensor.New(3, 3).View()).Multiply(enumerate(tensor.New(3, 3).View())),
			Want: tensor.New(3, 3),
		},
		"matrix three rows two cols same": {
			Got:  enumerate(tensor.New(3, 2)).Multiply(enumerate(tensor.New(3, 2))),
			Want: tensor.New(3, 2),
		},
		"three dim tensor same": {
			Got:  enumerate(tensor.New(4, 3, 2)).Multiply(enumerate(tensor.New(4, 3, 2))),
			Want: tensor.New(4, 3, 2),
		},
		"six dim tensor one element same": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).Multiply(enumerate(tensor.New(1, 1, 1, 1, 1, 1))),
			Want: tensor.New(1, 1, 1, 1, 1, 1),
		},
		"zero value scalar": {
			Got:  (&tensor.Tensor{}).Multiply(tensor.NewScalar(2)),
			Want: tensor.New(),
		},
		"new empty tensor aka scalar scalar": {
			Got:  tensor.New().Multiply(tensor.NewScalar(2)),
			Want: tensor.New(),
		},
		"vector with one element scalar": {
			Got:  enumerate(tensor.New(1)).Multiply(tensor.NewScalar(2)),
			Want: tensor.New(1),
		},
		"vector with 9 elements scalar": {
			Got:  enumerate(tensor.New(9)).Multiply(tensor.NewScalar(2)),
			Want: tensor.New(9),
		},
		"matrix one element scalar": {
			Got:  enumerate(tensor.New(1, 1)).Multiply(tensor.NewScalar(2)),
			Want: tensor.New(1, 1),
		},
		"square matrix scalar": {
			Got:  enumerate(tensor.New(3, 3)).Multiply(tensor.NewScalar(2)),
			Want: tensor.New(3, 3),
		},
		"square matrix view scalar": {
			Got:  enumerate(tensor.New(3, 3).View()).Multiply(tensor.NewScalar(2)),
			Want: tensor.New(3, 3),
		},
		"matrix three rows two cols scalar": {
			Got:  enumerate(tensor.New(3, 2)).Multiply(tensor.NewScalar(2)),
			Want: tensor.New(3, 2),
		},
		"three dim tensor scalar": {
			Got:  enumerate(tensor.New(4, 3, 2)).Multiply(tensor.NewScalar(2)),
			Want: tensor.New(4, 3, 2),
		},
		"six dim tensor one element scalar": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).Multiply(tensor.NewScalar(2)),
			Want: tensor.New(1, 1, 1, 1, 1, 1),
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			if test.Want == nil && test.Got == nil {
				return
			}

			if test.Want == nil && test.Got != nil {
				t.Fatalf("want result to be nil, got %v", test.Got)
			}
			if test.Want != nil && test.Got == nil {
				t.Fatalf("want result to be not nil")
			}
			if err := checkTensor(test.Want, test.Got); err != nil {
				t.Errorf("want err=nil; got %v", err)
			}
		})
	}
}

func TestTensorDivide(t *testing.T) {
	tests := map[string]struct {
		Got, Want *tensor.Tensor
	}{
		"zero value same": {
			Got:  (&tensor.Tensor{}).Divide((&tensor.Tensor{})),
			Want: tensor.New(),
		},
		"new empty tensor aka scalar same": {
			Got:  tensor.New().Divide(tensor.New()),
			Want: tensor.New(),
		},
		"vector with one element same": {
			Got:  enumerate(tensor.New(1)).Divide(enumerate(tensor.New(1))),
			Want: tensor.New(1),
		},
		"vector with 9 elements same": {
			Got:  enumerate(tensor.New(9)).Divide(enumerate(tensor.New(9))),
			Want: tensor.New(9),
		},
		"matrix one element same": {
			Got:  enumerate(tensor.New(1, 1)).Divide(enumerate(tensor.New(1, 1))),
			Want: tensor.New(1, 1),
		},
		"square matrix same": {
			Got:  enumerate(tensor.New(3, 3)).Divide(enumerate(tensor.New(3, 3))),
			Want: tensor.New(3, 3),
		},
		"square matrix view same": {
			Got:  enumerate(tensor.New(3, 3).View()).Divide(enumerate(tensor.New(3, 3).View())),
			Want: tensor.New(3, 3),
		},
		"matrix three rows two cols same": {
			Got:  enumerate(tensor.New(3, 2)).Divide(enumerate(tensor.New(3, 2))),
			Want: tensor.New(3, 2),
		},
		"three dim tensor same": {
			Got:  enumerate(tensor.New(4, 3, 2)).Divide(enumerate(tensor.New(4, 3, 2))),
			Want: tensor.New(4, 3, 2),
		},
		"six dim tensor one element same": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).Divide(enumerate(tensor.New(1, 1, 1, 1, 1, 1))),
			Want: tensor.New(1, 1, 1, 1, 1, 1),
		},
		"zero value scalar": {
			Got:  (&tensor.Tensor{}).Divide(tensor.NewScalar(2)),
			Want: tensor.New(),
		},
		"new empty tensor aka scalar scalar": {
			Got:  tensor.New().Divide(tensor.NewScalar(2)),
			Want: tensor.New(),
		},
		"vector with one element scalar": {
			Got:  enumerate(tensor.New(1)).Divide(tensor.NewScalar(2)),
			Want: tensor.New(1),
		},
		"vector with 9 elements scalar": {
			Got:  enumerate(tensor.New(9)).Divide(tensor.NewScalar(2)),
			Want: tensor.New(9),
		},
		"matrix one element scalar": {
			Got:  enumerate(tensor.New(1, 1)).Divide(tensor.NewScalar(2)),
			Want: tensor.New(1, 1),
		},
		"square matrix scalar": {
			Got:  enumerate(tensor.New(3, 3)).Divide(tensor.NewScalar(2)),
			Want: tensor.New(3, 3),
		},
		"square matrix view scalar": {
			Got:  enumerate(tensor.New(3, 3).View()).Divide(tensor.NewScalar(2)),
			Want: tensor.New(3, 3),
		},
		"matrix three rows two cols scalar": {
			Got:  enumerate(tensor.New(3, 2)).Divide(tensor.NewScalar(2)),
			Want: tensor.New(3, 2),
		},
		"three dim tensor scalar": {
			Got:  enumerate(tensor.New(4, 3, 2)).Divide(tensor.NewScalar(2)),
			Want: tensor.New(4, 3, 2),
		},
		"six dim tensor one element scalar": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).Divide(tensor.NewScalar(2)),
			Want: tensor.New(1, 1, 1, 1, 1, 1),
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			if test.Want == nil && test.Got == nil {
				return
			}

			if test.Want == nil && test.Got != nil {
				t.Fatalf("want result to be nil, got %v", test.Got)
			}
			if test.Want != nil && test.Got == nil {
				t.Fatalf("want result to be not nil")
			}
			if err := checkTensor(test.Want, test.Got); err != nil {
				t.Errorf("want err=nil; got %v", err)
			}
		})
	}
}

func TestTensorMod(t *testing.T) {
	tests := map[string]struct {
		Got, Want *tensor.Tensor
	}{
		"zero value same": {
			Got:  tensor.NewDelegate(nil).Add((&tensor.Tensor{}), tensor.NewScalar(4)).Mod(tensor.NewDelegate(nil).Add((&tensor.Tensor{}), tensor.NewScalar(1))),
			Want: tensor.New(),
		},
		"new empty tensor aka scalar same": {
			Got:  tensor.NewDelegate(nil).Add(tensor.New(), tensor.NewScalar(4)).Mod(tensor.NewDelegate(nil).Add(tensor.New(), tensor.NewScalar(1))),
			Want: tensor.New(),
		},
		"vector with one element same": {
			Got:  tensor.NewDelegate(nil).Add(enumerate(tensor.New(1)), tensor.NewScalar(4)).Mod(tensor.NewDelegate(nil).Add(enumerate(tensor.New(1)), tensor.NewScalar(1))),
			Want: tensor.New(1),
		},
		"vector with 9 elements same": {
			Got:  tensor.NewDelegate(nil).Add(enumerate(tensor.New(9)), tensor.NewScalar(4)).Mod(tensor.NewDelegate(nil).Add(enumerate(tensor.New(9)), tensor.NewScalar(1))),
			Want: tensor.New(9),
		},
		"matrix one element same": {
			Got:  tensor.NewDelegate(nil).Add(enumerate(tensor.New(1, 1)), tensor.NewScalar(4)).Mod(tensor.NewDelegate(nil).Add(enumerate(tensor.New(1, 1)), tensor.NewScalar(1))),
			Want: tensor.New(1, 1),
		},
		"square matrix same": {
			Got:  tensor.NewDelegate(nil).Add(enumerate(tensor.New(3, 3)), tensor.NewScalar(4)).Mod(tensor.NewDelegate(nil).Add(enumerate(tensor.New(3, 3)), tensor.NewScalar(1))),
			Want: tensor.New(3, 3),
		},
		"square matrix view same": {
			Got:  tensor.NewDelegate(nil).Add(enumerate(tensor.New(3, 3).View()), tensor.NewScalar(4)).Mod(tensor.NewDelegate(nil).Add(enumerate(tensor.New(3, 3).View()), tensor.NewScalar(1))),
			Want: tensor.New(3, 3),
		},
		"matrix three rows two cols same": {
			Got:  tensor.NewDelegate(nil).Add(enumerate(tensor.New(3, 2)), tensor.NewScalar(4)).Mod(tensor.NewDelegate(nil).Add(enumerate(tensor.New(3, 2)), tensor.NewScalar(1))),
			Want: tensor.New(3, 2),
		},
		"three dim tensor same": {
			Got:  tensor.NewDelegate(nil).Add(enumerate(tensor.New(4, 3, 2)), tensor.NewScalar(4)).Mod(tensor.NewDelegate(nil).Add(enumerate(tensor.New(4, 3, 2)), tensor.NewScalar(1))),
			Want: tensor.New(4, 3, 2),
		},
		"six dim tensor one element same": {
			Got:  tensor.NewDelegate(nil).Add(enumerate(tensor.New(1, 1, 1, 1, 1, 1)), tensor.NewScalar(4)).Mod(tensor.NewDelegate(nil).Add(enumerate(tensor.New(1, 1, 1, 1, 1, 1)), tensor.NewScalar(1))),
			Want: tensor.New(1, 1, 1, 1, 1, 1),
		},
		"zero value scalar": {
			Got:  (&tensor.Tensor{}).Mod(tensor.NewScalar(2)),
			Want: tensor.New(),
		},
		"new empty tensor aka scalar scalar": {
			Got:  tensor.New().Mod(tensor.NewScalar(2)),
			Want: tensor.New(),
		},
		"vector with one element scalar": {
			Got:  enumerate(tensor.New(1)).Mod(tensor.NewScalar(2)),
			Want: tensor.New(1),
		},
		"vector with 9 elements scalar": {
			Got:  enumerate(tensor.New(9)).Mod(tensor.NewScalar(2)),
			Want: tensor.New(9),
		},
		"matrix one element scalar": {
			Got:  enumerate(tensor.New(1, 1)).Mod(tensor.NewScalar(2)),
			Want: tensor.New(1, 1),
		},
		"square matrix scalar": {
			Got:  enumerate(tensor.New(3, 3)).Mod(tensor.NewScalar(2)),
			Want: tensor.New(3, 3),
		},
		"square matrix view scalar": {
			Got:  enumerate(tensor.New(3, 3).View()).Mod(tensor.NewScalar(2)),
			Want: tensor.New(3, 3),
		},
		"matrix three rows two cols scalar": {
			Got:  enumerate(tensor.New(3, 2)).Mod(tensor.NewScalar(2)),
			Want: tensor.New(3, 2),
		},
		"three dim tensor scalar": {
			Got:  enumerate(tensor.New(4, 3, 2)).Mod(tensor.NewScalar(2)),
			Want: tensor.New(4, 3, 2),
		},
		"six dim tensor one element scalar": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).Mod(tensor.NewScalar(2)),
			Want: tensor.New(1, 1, 1, 1, 1, 1),
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			if test.Want == nil && test.Got == nil {
				return
			}

			if test.Want == nil && test.Got != nil {
				t.Fatalf("want result to be nil, got %v", test.Got)
			}
			if test.Want != nil && test.Got == nil {
				t.Fatalf("want result to be not nil")
			}
			if err := checkTensor(test.Want, test.Got); err != nil {
				t.Errorf("want err=nil; got %v", err)
			}
		})
	}
}

func TestTensorNegative(t *testing.T) {
	tests := map[string]struct {
		Got, Want *tensor.Tensor
	}{
		"zero value": {
			Got:  (&tensor.Tensor{}).Negative(),
			Want: tensor.New(),
		},
		"new empty tensor aka scalar": {
			Got:  tensor.New().Negative(),
			Want: tensor.New(),
		},
		"vector with one element": {
			Got:  enumerate(tensor.New(1)).Negative(),
			Want: tensor.New(1),
		},
		"vector with 9 elements": {
			Got:  enumerate(tensor.New(9)).Negative(),
			Want: tensor.New(9),
		},
		"matrix one element": {
			Got:  enumerate(tensor.New(1, 1)).Negative(),
			Want: tensor.New(1, 1),
		},
		"square matrix": {
			Got:  enumerate(tensor.New(3, 3)).Negative(),
			Want: tensor.New(3, 3),
		},
		"square matrix view": {
			Got:  enumerate(tensor.New(3, 3).View()).Negative(),
			Want: tensor.New(3, 3),
		},
		"matrix three rows two cols": {
			Got:  enumerate(tensor.New(3, 2)).Negative(),
			Want: tensor.New(3, 2),
		},
		"three dim tensor": {
			Got:  enumerate(tensor.New(4, 3, 2)).Negative(),
			Want: tensor.New(4, 3, 2),
		},
		"six dim tensor one element": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).Negative(),
			Want: tensor.New(1, 1, 1, 1, 1, 1),
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			if test.Want == nil && test.Got == nil {
				return
			}

			if test.Want == nil && test.Got != nil {
				t.Fatalf("want result to be nil, got %v", test.Got)
			}
			if test.Want != nil && test.Got == nil {
				t.Fatalf("want result to be not nil")
			}
			if err := checkTensor(test.Want, test.Got); err != nil {
				t.Errorf("want err=nil; got %v", err)
			}
		})
	}
}
