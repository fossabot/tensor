// Code generated by testgen; DO NOT EDIT.

package tensor_test

import (
	"reflect"
	"testing"

	"github.com/ppknap/tensor"
)

// Use reflect package in case it isn't used in tests.
var _ = reflect.TypeOf(tensor.DType(0))

func TestTensorNDim(t *testing.T) {
	tests := map[string]struct {
		Got, Want int
	}{
		"zero value": {
			Got:  (&tensor.Tensor{}).NDim(),
			Want: 0,
		},
		"new empty tensor aka scalar": {
			Got:  tensor.New().NDim(),
			Want: 0,
		},
		"vector with one element": {
			Got:  enumerate(tensor.New(1)).NDim(),
			Want: 1,
		},
		"vector with 9 elements": {
			Got:  enumerate(tensor.New(9)).NDim(),
			Want: 1,
		},
		"matrix one element": {
			Got:  enumerate(tensor.New(1, 1)).NDim(),
			Want: 2,
		},
		"square matrix": {
			Got:  enumerate(tensor.New(3, 3)).NDim(),
			Want: 2,
		},
		"square matrix view": {
			Got:  enumerate(tensor.New(3, 3).View()).NDim(),
			Want: 2,
		},
		"matrix three rows two cols": {
			Got:  enumerate(tensor.New(3, 2)).NDim(),
			Want: 2,
		},
		"three dim tensor": {
			Got:  enumerate(tensor.New(4, 3, 2)).NDim(),
			Want: 3,
		},
		"six dim tensor one element": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).NDim(),
			Want: 6,
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			if test.Want != test.Got {
				t.Errorf("want %v; got %v", test.Want, test.Got)
			}
		})
	}
}

func TestTensorShape(t *testing.T) {
	tests := map[string]struct {
		Got, Want []int
	}{
		"zero value": {
			Got:  (&tensor.Tensor{}).Shape(),
			Want: nil,
		},
		"new empty tensor aka scalar": {
			Got:  tensor.New().Shape(),
			Want: nil,
		},
		"vector with one element": {
			Got:  enumerate(tensor.New(1)).Shape(),
			Want: []int{1},
		},
		"vector with 9 elements": {
			Got:  enumerate(tensor.New(9)).Shape(),
			Want: []int{9},
		},
		"matrix one element": {
			Got:  enumerate(tensor.New(1, 1)).Shape(),
			Want: []int{1, 1},
		},
		"square matrix": {
			Got:  enumerate(tensor.New(3, 3)).Shape(),
			Want: []int{3, 3},
		},
		"square matrix view": {
			Got:  enumerate(tensor.New(3, 3).View()).Shape(),
			Want: []int{3, 3},
		},
		"matrix three rows two cols": {
			Got:  enumerate(tensor.New(3, 2)).Shape(),
			Want: []int{3, 2},
		},
		"three dim tensor": {
			Got:  enumerate(tensor.New(4, 3, 2)).Shape(),
			Want: []int{4, 3, 2},
		},
		"six dim tensor one element": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).Shape(),
			Want: []int{1, 1, 1, 1, 1, 1},
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			if test.Want == nil && test.Got == nil {
				return
			}

			if test.Want == nil && test.Got != nil {
				t.Fatalf("want result to be nil, got %v", test.Got)
			}
			if test.Want != nil && test.Got == nil {
				t.Fatalf("want result to be not nil")
			}
			if !reflect.DeepEqual(test.Want, test.Got) {
				t.Errorf("want %v; got %v", test.Want, test.Got)
			}
		})
	}
}

func TestTensorStrides(t *testing.T) {
	tests := map[string]struct {
		Got, Want []int
	}{
		"zero value": {
			Got:  (&tensor.Tensor{}).Strides(),
			Want: nil,
		},
		"new empty tensor aka scalar": {
			Got:  tensor.New().Strides(),
			Want: nil,
		},
		"vector with one element": {
			Got:  enumerate(tensor.New(1)).Strides(),
			Want: []int{8},
		},
		"vector with 9 elements": {
			Got:  enumerate(tensor.New(9)).Strides(),
			Want: []int{8},
		},
		"matrix one element": {
			Got:  enumerate(tensor.New(1, 1)).Strides(),
			Want: []int{8, 8},
		},
		"square matrix": {
			Got:  enumerate(tensor.New(3, 3)).Strides(),
			Want: []int{24, 8},
		},
		"square matrix view": {
			Got:  enumerate(tensor.New(3, 3).View()).Strides(),
			Want: []int{24, 8},
		},
		"matrix three rows two cols": {
			Got:  enumerate(tensor.New(3, 2)).Strides(),
			Want: []int{16, 8},
		},
		"three dim tensor": {
			Got:  enumerate(tensor.New(4, 3, 2)).Strides(),
			Want: []int{48, 16, 8},
		},
		"six dim tensor one element": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).Strides(),
			Want: []int{8, 8, 8, 8, 8, 8},
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			if test.Want == nil && test.Got == nil {
				return
			}

			if test.Want == nil && test.Got != nil {
				t.Fatalf("want result to be nil, got %v", test.Got)
			}
			if test.Want != nil && test.Got == nil {
				t.Fatalf("want result to be not nil")
			}
			if !reflect.DeepEqual(test.Want, test.Got) {
				t.Errorf("want %v; got %v", test.Want, test.Got)
			}
		})
	}
}

func TestTensorSize(t *testing.T) {
	tests := map[string]struct {
		Got, Want int
	}{
		"zero value": {
			Got:  (&tensor.Tensor{}).Size(),
			Want: 1,
		},
		"new empty tensor aka scalar": {
			Got:  tensor.New().Size(),
			Want: 1,
		},
		"vector with one element": {
			Got:  enumerate(tensor.New(1)).Size(),
			Want: 1,
		},
		"vector with 9 elements": {
			Got:  enumerate(tensor.New(9)).Size(),
			Want: 9,
		},
		"matrix one element": {
			Got:  enumerate(tensor.New(1, 1)).Size(),
			Want: 1,
		},
		"square matrix": {
			Got:  enumerate(tensor.New(3, 3)).Size(),
			Want: 9,
		},
		"square matrix view": {
			Got:  enumerate(tensor.New(3, 3).View()).Size(),
			Want: 9,
		},
		"matrix three rows two cols": {
			Got:  enumerate(tensor.New(3, 2)).Size(),
			Want: 6,
		},
		"three dim tensor": {
			Got:  enumerate(tensor.New(4, 3, 2)).Size(),
			Want: 24,
		},
		"six dim tensor one element": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).Size(),
			Want: 1,
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			if test.Want != test.Got {
				t.Errorf("want %v; got %v", test.Want, test.Got)
			}
		})
	}
}

func TestTensorIsOwner(t *testing.T) {
	tests := map[string]struct {
		Got, Want bool
	}{
		"zero value": {
			Got:  (&tensor.Tensor{}).IsOwner(),
			Want: true,
		},
		"new empty tensor aka scalar": {
			Got:  tensor.New().IsOwner(),
			Want: true,
		},
		"vector with one element": {
			Got:  enumerate(tensor.New(1)).IsOwner(),
			Want: true,
		},
		"vector with 9 elements": {
			Got:  enumerate(tensor.New(9)).IsOwner(),
			Want: true,
		},
		"matrix one element": {
			Got:  enumerate(tensor.New(1, 1)).IsOwner(),
			Want: true,
		},
		"square matrix": {
			Got:  enumerate(tensor.New(3, 3)).IsOwner(),
			Want: true,
		},
		"square matrix view": {
			Got:  enumerate(tensor.New(3, 3).View()).IsOwner(),
			Want: false,
		},
		"matrix three rows two cols": {
			Got:  enumerate(tensor.New(3, 2)).IsOwner(),
			Want: true,
		},
		"three dim tensor": {
			Got:  enumerate(tensor.New(4, 3, 2)).IsOwner(),
			Want: true,
		},
		"six dim tensor one element": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).IsOwner(),
			Want: true,
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			if test.Want != test.Got {
				t.Errorf("want %v; got %v", test.Want, test.Got)
			}
		})
	}
}

func TestTensorNBytes(t *testing.T) {
	tests := map[string]struct {
		Got, Want int
	}{
		"zero value": {
			Got:  (&tensor.Tensor{}).NBytes(),
			Want: 8,
		},
		"new empty tensor aka scalar": {
			Got:  tensor.New().NBytes(),
			Want: 8,
		},
		"vector with one element": {
			Got:  enumerate(tensor.New(1)).NBytes(),
			Want: 8,
		},
		"vector with 9 elements": {
			Got:  enumerate(tensor.New(9)).NBytes(),
			Want: 72,
		},
		"matrix one element": {
			Got:  enumerate(tensor.New(1, 1)).NBytes(),
			Want: 8,
		},
		"square matrix": {
			Got:  enumerate(tensor.New(3, 3)).NBytes(),
			Want: 72,
		},
		"square matrix view": {
			Got:  enumerate(tensor.New(3, 3).View()).NBytes(),
			Want: 72,
		},
		"matrix three rows two cols": {
			Got:  enumerate(tensor.New(3, 2)).NBytes(),
			Want: 48,
		},
		"three dim tensor": {
			Got:  enumerate(tensor.New(4, 3, 2)).NBytes(),
			Want: 192,
		},
		"six dim tensor one element": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).NBytes(),
			Want: 8,
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			if test.Want != test.Got {
				t.Errorf("want %v; got %v", test.Want, test.Got)
			}
		})
	}
}

func TestTensorBase(t *testing.T) {
	tests := map[string]struct {
		Got, Want *tensor.Tensor
	}{
		"zero value": {
			Got:  (&tensor.Tensor{}).Base(),
			Want: nil,
		},
		"new empty tensor aka scalar": {
			Got:  tensor.New().Base(),
			Want: nil,
		},
		"vector with one element": {
			Got:  enumerate(tensor.New(1)).Base(),
			Want: nil,
		},
		"vector with 9 elements": {
			Got:  enumerate(tensor.New(9)).Base(),
			Want: nil,
		},
		"matrix one element": {
			Got:  enumerate(tensor.New(1, 1)).Base(),
			Want: nil,
		},
		"square matrix": {
			Got:  enumerate(tensor.New(3, 3)).Base(),
			Want: nil,
		},
		"square matrix view": {
			Got:  enumerate(tensor.New(3, 3).View()).Base(),
			Want: tensor.New(3, 3),
		},
		"matrix three rows two cols": {
			Got:  enumerate(tensor.New(3, 2)).Base(),
			Want: nil,
		},
		"three dim tensor": {
			Got:  enumerate(tensor.New(4, 3, 2)).Base(),
			Want: nil,
		},
		"six dim tensor one element": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).Base(),
			Want: nil,
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			if test.Want == nil && test.Got == nil {
				return
			}

			if test.Want == nil && test.Got != nil {
				t.Fatalf("want result to be nil, got %v", test.Got)
			}
			if test.Want != nil && test.Got == nil {
				t.Fatalf("want result to be not nil")
			}
			if err := checkTensor(test.Want, test.Got); err != nil {
				t.Errorf("want err=nil; got %v", err)
			}
		})
	}
}

func TestTensorFillBuf(t *testing.T) {
	tests := map[string]struct {
		Got, Want *tensor.Tensor
	}{
		"vector with 9 elements": {
			Got:  enumerate(tensor.New(9)).FillBuf([]int{2, 2, 2, 2, 2, 2, 2, 2, 2}),
			Want: tensor.New(9),
		},
		"square matrix": {
			Got:  enumerate(tensor.New(3, 3)).FillBuf([]int{2, 2, 2, 2, 2, 2, 2, 2, 2}),
			Want: tensor.New(3, 3),
		},
		"square matrix view": {
			Got:  enumerate(tensor.New(3, 3).View()).FillBuf([]int{2, 2, 2, 2, 2, 2, 2, 2, 2}),
			Want: tensor.New(3, 3),
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			if test.Want == nil && test.Got == nil {
				return
			}

			if test.Want == nil && test.Got != nil {
				t.Fatalf("want result to be nil, got %v", test.Got)
			}
			if test.Want != nil && test.Got == nil {
				t.Fatalf("want result to be not nil")
			}
			if err := checkTensor(test.Want, test.Got); err != nil {
				t.Errorf("want err=nil; got %v", err)
			}
		})
	}
}

func TestTensorPanicFillBuf(t *testing.T) {
	tests := map[string]func(){
		"zero value":                  func() { _ = (&tensor.Tensor{}).FillBuf([]int{2, 2, 2, 2, 2, 2, 2, 2, 2}) },
		"new empty tensor aka scalar": func() { _ = tensor.New().FillBuf([]int{2, 2, 2, 2, 2, 2, 2, 2, 2}) },
		"vector with one element":     func() { _ = enumerate(tensor.New(1)).FillBuf([]int{2, 2, 2, 2, 2, 2, 2, 2, 2}) },
		"matrix one element":          func() { _ = enumerate(tensor.New(1, 1)).FillBuf([]int{2, 2, 2, 2, 2, 2, 2, 2, 2}) },
		"matrix three rows two cols":  func() { _ = enumerate(tensor.New(3, 2)).FillBuf([]int{2, 2, 2, 2, 2, 2, 2, 2, 2}) },
		"three dim tensor":            func() { _ = enumerate(tensor.New(4, 3, 2)).FillBuf([]int{2, 2, 2, 2, 2, 2, 2, 2, 2}) },
		"six dim tensor one element":  func() { _ = enumerate(tensor.New(1, 1, 1, 1, 1, 1)).FillBuf([]int{2, 2, 2, 2, 2, 2, 2, 2, 2}) },
	}

	for name, fn := range tests {
		t.Run(name, func(t *testing.T) {
			defer func() {
				if e, ok := recover().(*tensor.Error); !ok || e == nil {
					t.Fatalf("test should have panicked with Error, but it did not")
				}
			}()

			fn()
		})
	}
}

func TestTensorDType(t *testing.T) {
	tests := map[string]struct {
		Got, Want tensor.DType
	}{
		"zero value": {
			Got:  (&tensor.Tensor{}).DType(),
			Want: tensor.Float64,
		},
		"new empty tensor aka scalar": {
			Got:  tensor.New().DType(),
			Want: tensor.Float64,
		},
		"vector with one element": {
			Got:  enumerate(tensor.New(1)).DType(),
			Want: tensor.Float64,
		},
		"vector with 9 elements": {
			Got:  enumerate(tensor.New(9)).DType(),
			Want: tensor.Float64,
		},
		"matrix one element": {
			Got:  enumerate(tensor.New(1, 1)).DType(),
			Want: tensor.Float64,
		},
		"square matrix": {
			Got:  enumerate(tensor.New(3, 3)).DType(),
			Want: tensor.Float64,
		},
		"square matrix view": {
			Got:  enumerate(tensor.New(3, 3).View()).DType(),
			Want: tensor.Float64,
		},
		"matrix three rows two cols": {
			Got:  enumerate(tensor.New(3, 2)).DType(),
			Want: tensor.Float64,
		},
		"three dim tensor": {
			Got:  enumerate(tensor.New(4, 3, 2)).DType(),
			Want: tensor.Float64,
		},
		"six dim tensor one element": {
			Got:  enumerate(tensor.New(1, 1, 1, 1, 1, 1)).DType(),
			Want: tensor.Float64,
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			if test.Want != test.Got {
				t.Errorf("want %v; got %v", test.Want, test.Got)
			}
		})
	}
}
